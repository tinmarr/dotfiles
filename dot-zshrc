#!/usr/bin/env zsh

# Load prompt
eval "$(oh-my-posh init zsh --config ~/.config/ohmyposh/theme.json)"

# Plugin Manager (zinit)
ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"
[ ! -d $ZINIT_HOME ] && mkdir -p "$(dirname $ZINIT_HOME)" # check if the directory is there
[ ! -d $ZINIT_HOME/.git ] && git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME" # zinit isn't installed, install it
source "${ZINIT_HOME}/zinit.zsh"

export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"

export GOPATH="$HOME/go"
export PATH="$GOPATH/bin:$PATH"

# Install plugins
zinit wait"" lucid light-mode for \
      atload"_zsh_autosuggest_start; unalias zi" zsh-users/zsh-autosuggestions \
      atinit"zicompinit; zicdreplay" zsh-users/zsh-syntax-highlighting \
      zsh-users/zsh-history-substring-search \
      blockf atpull'zinit creinstall -q .' zsh-users/zsh-completions \
      Aloxaf/fzf-tab \
      atload'eval "$(pyenv init -)"' atload'eval "$(pyenv virtualenv-init -)"' "$PYENV_ROOT"

# Install snippets
zinit ice wait lucid; zinit snippet OMZP::sudo

# Direnv with zinit
zinit from"gh-r" as"program" mv"direnv* -> direnv" \
    atclone'./direnv hook zsh > zhook.zsh' atpull'%atclone' \
    pick"direnv" src="zhook.zsh" for \
        direnv/direnv

# ZSH Shell options
# https://zsh.sourceforge.io/Doc/Release/Options.html
unsetopt beep
setopt correct
setopt correct
setopt share_history append_history hist_ignore_space
setopt hist_ignore_all_dups hist_save_no_dups hist_ignore_dups hist_find_no_dups

# Enable vi mode
bindkey -v

# key binds
bindkey "^[[1;5C" forward-word
bindkey "^[[1;5D" backward-word
bindkey '^H' backward-kill-word
bindkey "^[[3~" delete-char

# Keep 1000 lines of history within the shell and save it to ~/.zsh_history:
HISTSIZE=1000
SAVEHIST=1000
HISTFILE=~/.zsh_history
HISTDUP=erase

# append completions to fpath
# Use modern completion system
zstyle :compinstall filename '/home/martin/.zshrc'

# Case insensitive completion
zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}'
# Colors in completions
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"

# setup fzf-tab
# disable sort when completing `git checkout`
zstyle ':completion:*:git-checkout:*' sort false
# set descriptions format to enable group support
# NOTE: don't use escape sequences here, fzf-tab will ignore them
zstyle ':completion:*:descriptions' format '[%d]'
# set list-colors to enable filename colorizing
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
# force zsh not to show completion menu, which allows fzf-tab to capture the unambiguous prefix
zstyle ':completion:*' menu no
# preview directory's content with eza when completing cd
zstyle ':fzf-tab:complete:z:*' fzf-preview 'eza -1 --color=always $realpath'
# switch group using `<` and `>`
zstyle ':fzf-tab:*' switch-group '<' '>'

# setup history subsearch
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down
bindkey '^K' history-substring-search-up
bindkey '^J' history-substring-search-down

# Standard Terminal Variables
export LANG=en_US.UTF-8
export EDITOR="nvim"
export GPG_TTY=$TTY


# Load various shell utilities
eval "$(fzf --zsh)"
eval "$(zoxide init zsh)"
alias cd="z" # old habits die hard

# Use bat in manpages
export MANROFFOPT="-c"
export MANPAGER="sh -c 'col -bx | bat -l man -p'"

#### Quick aliases ####
alias ls="eza --icons --group-directories-first"
alias l="ls"
alias la="ls -a"
alias ll="ls -l --git"
alias lla="ls -l -a --git"
alias v="nvim"
alias t="tmux"
alias s="ssh"
alias h="history 0"
alias lg="lazygit"

#### Macros ####
vf () {
    file="$(fzf)"
    if [[ $file == "" ]]; then
        v
    else
        v $file
    fi
}
pgadmin () {
    pyenv activate pgadmin
    pgadmin4
}
alias updategrub="sudo grub-mkconfig -o /boot/grub/grub.cfg"
alias pipunall="pip freeze | grep -v '^-e' | xargs pip uninstall -y"
tzupdate () {
    # Function because the curl is evaluated as an alias
    timedatectl set-timezone $(curl https://ipapi.co/timezone)
}
alias gitrmbranches="git branch --list| grep -v \* | xargs git branch -D"
gitc () {
    git add .
    git commit -m $1
    git push
}
alias gits="(git fetch &>/dev/null &) && git status"
alias gitl="git log --compact-summary"

# https://yazi-rs.github.io/docs/quick-start#shell-wrapper
y () {
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
	yazi "$@" --cwd-file="$tmp"
	if cwd="$(command cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
		builtin cd -- "$cwd"
	fi
	rm -f -- "$tmp"
}

#### Check mirrors ####
mirrors () {
    sudo test
    echo "Finding best mirrors..."
    sudo reflector -c CA --score 5 -p https --sort rate --save /etc/pacman.d/mirrorlist
    echo "Done"
}

#### Update System ####
update () {
    sudo test
    mirrors
    yay -Syy
    yay -Qu > $HOME/.cache/updated-packages.txt
    echo "Starting update:"
    yay -Syu --answerclean N --answerdiff N --removemake --noconfirm
    zinit self-update
    zinit update --parallel

    cd ~/dotfiles
    git pull
    ./restowall
    cd ~

    yay
    echo "Orphans:"
    yay -Qdt
    echo "If there are orphans, remove with:"
    echo "    yay -Qdtq | sudo pacman -Rns -"
    echo "Not done automatically because this could break stuff"
    echo "$(cat $HOME/.cache/updated-packages.txt | wc -l) packages updated"
    echo "Updated packages stored in ~/.cache/updated-packages.txt"
}

#### Quick Scripts ####
zv () {
    dest=$(zoxide query $1)
    sesh=$(basename $dest)
    t new -s $sesh -d
    if [[ $? -eq 0 ]]; then
        printf "creating new tmux session"
        sleep "0.5s"
        t send-keys -t $sesh "z $1" Enter
        t send-keys -t $sesh "v" Enter
    fi

    if [[ -z $TMUX ]]; then
        t a -t $sesh
    else
        t switchc -t $sesh
    fi
}

pv () {
    proj=$(fd . coding -td -d 2 --base-directory $HOME | fzf)
    sesh=$(basename $proj)
    t new -s $sesh -d
    if [[ $? -eq 0 ]]; then
        printf "creating new tmux session"
        sleep "0.5s"
        t send-keys -t $sesh "cd $HOME/$proj" Enter
        t send-keys -t $sesh "v" Enter
    fi

    if [[ -z $TMUX ]]; then
        t a -t $sesh
    else
        t switchc -t $sesh
    fi
}

clone () {
    gh repo clone $(gh repo list $1 --json nameWithOwner --jq '.[].nameWithOwner' | fzf)
}

virt-cam-reset () {
    echo "Make sure to turn off any virtual cameras before continuing"
    echo "Press any key to continue:"
    read
    sudo modprobe -r v4l2loopback
    sudo modprobe v4l2loopback
}
